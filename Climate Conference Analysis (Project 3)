--This project utilized the following fictional dataset supplied by Break Into Tech.—

CREATE TABLE vips (
     member_id INTEGER PRIMARY KEY
   , last_name TEXT
   , first_name TEXT
   , event INTEGER
   , provides_feedback_to INTEGER
   , association TEXT
   , assoc_type TEXT
   , member_since INTEGER
   );
   
CREATE TABLE reservations ( 
    member_id INTEGER
  , hotel INTEGER
  , welcome_rsvp BIT
  , dinner_rsvp BIT
  );
 
 
CREATE TABLE events (
    event_id INTEGER PRIMARY KEY
  , event_name TEXT
  , event_type TEXT
  );
  
CREATE TABLE hotels (
    hotel_id INTEGER PRIMARY KEY
  , hotel_name TEXT
  , address TEXT
  );

INSERT INTO vips VALUES
(2814, 'Fletcher', 'David', 5, 3742, 'Anishinabek Educational Institute', 'education', 2004)
,(1944, 'Kim', 'Jiho', 4, 4230, 'Appalachian State', 'education', 1991)
,(3889, 'Kowalski', 'Alex', 9, 3460, 'Brigg & McKinnnon AEC', 'private', 2015)
,(3775, 'Al-Hassan', 'Amina', 6, 3891, 'California Department of Water Resources', 'government', 2013)
,(4003, 'Chang', 'Nathan', 8, 3960, 'Chang Engineers, LLC', 'private', 2017)
,(3490, 'Anderson', 'Shanae', 2, 4315, 'Chicago Department of Public Health', 'government', 2008)
,(3077, 'Murphy', 'Aisling', 3, 2731, 'Climate Impacts on Farming Institute', 'research', 2006)
,(3960, 'Ivanov', 'Dmitri', 6, 2814, 'Cooperative Institute for Climate, Ocean, and Ecosystem Studies', 'research', 2016)
,(4402, 'Bennett', 'Leah', NULL, NULL, 'Denver Climate Research Foundation', 'research', 2024)
,(3891, 'Roy', 'Harper', 4, 3077, 'Environmental Science Associates', 'private', 2015)
,(4386, 'Silva', 'Thiago', NULL, NULL, 'Everglades Research Institute', 'research', 2023)
,(4297, 'Chukwu', 'Ifeoma', 9, 2716, 'Georgia State University', 'education', 2020)
,(3189, 'Martinez', 'Isabella', 8, 2011, 'Iowa State University', 'education', 2007)
,(3491, 'Gonzalez', 'Victor', 5, 3047, 'McGill University', 'education', 2008)
,(3742, 'Brown', 'Timothy', 3, 3490, 'Michigan State University', 'education', 2012)
,(4361, 'Riley', 'Daniel', 6, 1944, 'Minnesota Water Board', 'education', 2023)
,(1934, 'Garcia', 'Mateo', NULL, NULL, 'Oklahoma Department of Wildlife Conservation', 'government', 1990)
,(2011, 'Patel', 'Anika', 7, 3491, 'Renewable Energy Research Center, Honolulu', 'research', 1995)
,(4315, 'Shepherd', 'Priya', 10, 4003, 'Tech517', 'private', 2022)
,(1738, 'Johnson', 'Denny', NULL, NULL, 'Texas Department of Conservation and Natural Resources', 'government', 1987)
,(4230, 'Parker', 'Moss', 2, 3719, 'University of California, Davis', 'education', 2019)
,(2731, 'Rivera', 'Juan', 1, 4297, 'University of Montana', 'education', 2003)
,(2091, 'Haines', 'Keisha', 11, 3189, 'University of North Carolina', 'education', 1998)
,(2551, 'Nguyen', 'Linh', 2, 2091, 'University of Pennsylvania', 'education', 2002)
,(3047, 'Singh', 'Aarav', 4, 2551, 'US Department of Fish and Wildlife', 'government', 2005)
,(4112, 'Fernandez', 'Lucia', NULL, NULL, 'US Department of Fish and Wildlife', 'government', 2018)
,(3719, 'Denton', 'K. L.', 11, 3889, 'US Department of Housing and Urban Development', 'government', 2011)
,(3460, 'Chen', 'Beverly', 7, 4361, 'US Department of Natural Resources', 'government', 2008)
,(2716, 'Rodriguez', 'Sofia', 7, 3775, 'US Department of Renewable Energy', 'government', 2003)
,(2800, 'Lee', 'Min-Jun', NULL, NULL, 'US Department of Renewable Energy', 'government', 2004)
;

INSERT INTO reservations VALUES
 (3491,  1, 1, 1)
,(4361,  1, 1, 1)
,(3047,  2, 1, 1)
,(3775,  1, 1, 1)
,(4003,  3, 0, 1)
,(4402,  2, 1, 1)
,(3891,  3, 1, 1)
,(2011,  1, 1, 1)
,(4808,  2, 1, 1)
,(3490,  1, 0, 1)
,(3189,  1, 1, 1)
,(1944,  1, 0, 1)
,(2716,  2, 0, 1)
,(2551,  2, 1, 1)
,(4386,  2, 0, 1)
,(2814,  3, 1, 1)
,(1738,  2, 0, 1)
,(3960,  1, 1, 1)
,(4315,  3, 1, 0)
,(4722,  2, 1, 1)
,(2731,  3, 1, 1)
,(2091,  1, 1, 0)
,(3889,  3, 1, 1)
,(3742,  2, 0, 1)
,(3719,  2, 0, 1)
,(3460,  2, 1, 1)
,(3077,  2, 0, 1)
,(4420,  1, 1, 0)
,(2800,  2, 0, 1)
,(1934,  3, 1, 1)
;

INSERT INTO events VALUES
  (1, 'Climate Change Communication: Engaging the Public and Policy Makers', 'Keynote')
, (2, 'Climate Change and Public Health: Risks and Responses', 'Panel')
, (3, 'Climate Change and Agriculture: Ensuring Food Security', 'Panel')
, (4, 'Biodiversity and Ecosystem Services in a Changing Climate', 'Panel')
, (5, 'Indigenous Knowledge and Climate Change Adaptation', 'Panel')
, (6, 'The Role of Oceans in Climate Change: Impacts and Solutions', 'Panel')
, (7, 'Climate Change and Renewable Energy: Innovations and Challenges', 'Panel')
, (8, 'Climate Justice and Equity: Addressing Disproportionate Impacts', 'Panel')
, (9, 'The Economic Impact of Climate Change: Costs and Opportunities', 'Panel')
, (10, 'Technological Innovations for Climate Monitoring and Assessment', 'Workshop')
, (11, 'Urban Resilience: Designing Climate-Smart Cities', 'Workshop')
, (12, 'The Role of Policy in Combating Climate Change', 'Workshop')
;

INSERT INTO hotels VALUES
   (1, 'Hyatt Downtown', '392 South Main Street, Cityville, PA')
 , (2, 'Marriott', '1240 Marshall Avenue, Cityville, PA')
 , (3, 'Four Season''s', '900 Winter Road, Cityville, PA')
 ;

--Taking a look at the data tables to get started.

SELECT * FROM vips LIMIT 5;
SELECT * FROM reservations LIMIT 5;
SELECT * FROM events LIMIT 5;
SELECT * FROM hotels LIMIT 5;

--The following are analyses conducted by me:

-- LEFT JOIN: List all the VIPs by last name, and the hotel at which they are staying, alphabetically by hotel.

SELECT vips.last_name, hotels.hotel_name
FROM vips
LEFT JOIN reservations
ON vips.member_id = reservations.member_id
LEFT JOIN hotels
ON reservations.hotel = hotels.hotel_id
ORDER BY hotels.hotel_name ASC
;

-- INNER JOIN: Determine which VIP attendees are attending the dinner.

SELECT vips.last_name
FROM vips
INNER JOIN reservations
ON vips.member_id = reservations.member_id
WHERE dinner_rsvp = 1
ORDER BY vips.last_name ASC
;

-- Custom Query, INNER JOIN: Which VIPs are only attending a workshop, what is the name of the workshop, what association type are they from, and since when have they been a member?

SELECT vips.first_name, vips.last_name, events.event_name, vips.assoc_type, vips.member_since
FROM vips
INNER JOIN events
ON vips.event = events.event_id
WHERE events.event_type LIKE '%workshop%'
;

-- RIGHT JOIN: List the association, and the last name for only the keynote speakers, and the names of the keynote events. Show that they are keynotes as well.

SELECT vips.association, vips.last_name, events.event_name, events.event_type
FROM vips
RIGHT JOIN events
ON vips.event = events.event_id
WHERE events.event_type LIKE '%keynote%'
;

--Custom Query: How many events are there in total?

SELECT COUNT (event_type)
FROM events;

--Custom Query: Let’s see all of the event details.

SELECT *
FROM events;

-- Custom Query: Which VIPs are attending both the welcome party, and the dinner?

SELECT vips.last_name, reservations.welcome_rsvp, reservations.dinner_rsvp
FROM vips
INNER JOIN reservations
ON vips.member_id = reservations.member_id
WHERE welcome_rsvp = 1
AND dinner_rsvp = 1
ORDER BY vips.last_name ASC
;

-- SELF JOIN: Which VIP attendees are reviewing which other VIP speakers?

SELECT Reviewing.last_name AS Reviewer, Speaking.last_name AS Speaker 
FROM vips AS Reviewing
JOIN vips AS Speaking
ON Reviewing.provides_feedback_to = Speaking.member_id
ORDER BY Speaker ASC
;

--Multiple JOINS: What event are the speakers being reviewed, speaking at?

SELECT Reviewing.last_name AS Reviewer, Speaking.last_name AS Speaker, events.event_name AS Event
FROM vips AS Reviewing
JOIN vips AS Speaking
ON Reviewing.provides_feedback_to = Speaking.member_id
LEFT JOIN events
ON Speaking.event = events.event_id
ORDER BY Event ASC
;

--Custom Query: Let’s see if there is a difference between the amount of VIP members, and how many are providing reviews.

SELECT COUNT (member_id), COUNT (event), COUNT(provides_feedback_to)
FROM vips;

--Custom Query: Which VIP attendees are not reviewing anyone, and which association are they from?

SELECT vips.first_name, vips.last_name, vips.provides_feedback_to, vips.association
FROM vips
WHERE vips.provides_feedback_to IS NULL
;

-- Query with a Subquery: Find VIPs attending the event(s) with the most VIP participants. List those events too, and their event numbers.

SELECT vips.first_name, vips.last_name, events.event_name, vips.event 
FROM vips
FULL JOIN events
ON vips.event = events.event_id
WHERE vips.event IN 
(SELECT event 
    FROM vips 
    GROUP BY event 
    ORDER BY COUNT(*) DESC
    LIMIT 5
    )
ORDER BY vips.event
;

--End.
